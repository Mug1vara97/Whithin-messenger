/**
 * –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞—É–¥–∏–æ-—Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π AudioContext –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤,
 * –∫–æ—Ç–æ—Ä—ã–π –ù–ï –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
 */

class IsolatedCallAudioManager {
  constructor() {
    this.audioContext = null;
    this.participants = new Map(); // Map<userId, { source, gain, audioElement }>
    this.masterGainNode = null;
    this.isInitialized = false;
    this.destinationNode = null;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—É–¥–∏–æ-—Å–∏—Å—Ç–µ–º—ã
   */
  async initialize() {
    if (this.isInitialized && this.audioContext && this.audioContext.state !== 'closed') {
      return;
    }

    try {
      // –°–æ–∑–¥–∞–µ–º –û–¢–î–ï–õ–¨–ù–´–ô AudioContext –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
      this.audioContext = new (window.AudioContext || window.webkitAudioContext)({
        sampleRate: 48000,
        latencyHint: 'interactive'
      });

      // –°–æ–∑–¥–∞–µ–º master gain node –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—â–µ–π –≥—Ä–æ–º–∫–æ—Å—Ç—å—é
      this.masterGainNode = this.audioContext.createGain();
      this.masterGainNode.gain.value = 1.0;

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π destination node
      this.destinationNode = this.audioContext.createMediaStreamDestination();
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º master gain –∫ destination
      this.masterGainNode.connect(this.destinationNode);

      // –ö–†–ò–¢–ò–ß–ù–û: –ù–ï –ø–æ–¥–∫–ª—é—á–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é –∫ audioContext.destination
      // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–µ–º audio element —Å —ç—Ç–∏–º stream
      const audioElement = document.createElement('audio');
      audioElement.srcObject = this.destinationNode.stream;
      audioElement.autoplay = true;
      audioElement.playsInline = true;
      audioElement.controls = false;
      audioElement.style.display = 'none';
      
      // –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      audioElement.setAttribute('data-call-audio', 'true');
      audioElement.setAttribute('data-audio-type', 'call-participants');
      
      document.body.appendChild(audioElement);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è user interaction)
      try {
        await audioElement.play();
        console.log('‚úÖ IsolatedCallAudio: Initialized successfully');
      } catch (error) {
        console.warn('‚ö†Ô∏è IsolatedCallAudio: Autoplay blocked, waiting for user interaction:', error);
      }

      this.isInitialized = true;
    } catch (error) {
      console.error('‚ùå IsolatedCallAudio: Failed to initialize:', error);
      throw error;
    }
  }

  /**
   * –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –±—ã–ª –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
   */
  async resume() {
    if (this.audioContext && this.audioContext.state === 'suspended') {
      await this.audioContext.resume();
      console.log('üîä IsolatedCallAudio: AudioContext resumed');
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∑–≤–æ–Ω–∫–∞
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {MediaStream} mediaStream - –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞
   * @param {Object} options - –û–ø—Ü–∏–∏ (volume, muted)
   */
  async addParticipant(userId, mediaStream, options = {}) {
    if (!this.isInitialized) {
      await this.initialize();
    }

    await this.resume();

    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    this.removeParticipant(userId);

    try {
      // –°–æ–∑–¥–∞–µ–º source –∏–∑ MediaStream
      const source = this.audioContext.createMediaStreamSource(mediaStream);
      
      // –°–æ–∑–¥–∞–µ–º gain node –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏
      const gainNode = this.audioContext.createGain();
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å
      const volume = options.volume !== undefined ? options.volume : 1.0;
      const muted = options.muted || false;
      gainNode.gain.value = muted ? 0 : volume;

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º: source -> gain -> masterGain
      source.connect(gainNode);
      gainNode.connect(this.masterGainNode);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
      this.participants.set(userId, {
        source,
        gain: gainNode,
        volume,
        muted
      });

      console.log(`‚úÖ IsolatedCallAudio: Added participant ${userId}`);
    } catch (error) {
      console.error(`‚ùå IsolatedCallAudio: Failed to add participant ${userId}:`, error);
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
   * @param {string} userId 
   */
  removeParticipant(userId) {
    const participant = this.participants.get(userId);
    if (!participant) return;

    try {
      // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —É–∑–ª—ã
      participant.source.disconnect();
      participant.gain.disconnect();
      
      this.participants.delete(userId);
      console.log(`üóëÔ∏è IsolatedCallAudio: Removed participant ${userId}`);
    } catch (error) {
      console.warn(`‚ö†Ô∏è IsolatedCallAudio: Error removing participant ${userId}:`, error);
    }
  }

  /**
   * –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
   * @param {string} userId 
   * @param {number} volume - –ì—Ä–æ–º–∫–æ—Å—Ç—å (0-1)
   */
  setParticipantVolume(userId, volume) {
    const participant = this.participants.get(userId);
    if (!participant) {
      console.warn(`‚ö†Ô∏è IsolatedCallAudio: Participant ${userId} not found`);
      return;
    }

    participant.volume = volume;
    if (!participant.muted) {
      participant.gain.gain.value = volume;
    }
    console.log(`üîä IsolatedCallAudio: Set volume for ${userId}: ${volume}`);
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ/–≤–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
   * @param {string} userId 
   * @param {boolean} muted 
   */
  setParticipantMuted(userId, muted) {
    const participant = this.participants.get(userId);
    if (!participant) {
      console.warn(`‚ö†Ô∏è IsolatedCallAudio: Participant ${userId} not found`);
      return;
    }

    participant.muted = muted;
    participant.gain.gain.value = muted ? 0 : participant.volume;
    console.log(`üîá IsolatedCallAudio: Set muted for ${userId}: ${muted}`);
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Å—Ç–µ—Ä-–≥—Ä–æ–º–∫–æ—Å—Ç–∏ (–¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
   * @param {number} volume - –ì—Ä–æ–º–∫–æ—Å—Ç—å (0-1)
   */
  setMasterVolume(volume) {
    if (!this.masterGainNode) return;
    
    this.masterGainNode.gain.value = volume;
    console.log(`üîä IsolatedCallAudio: Set master volume: ${volume}`);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
   * @param {string} userId 
   */
  getParticipantInfo(userId) {
    const participant = this.participants.get(userId);
    if (!participant) return null;

    return {
      volume: participant.volume,
      muted: participant.muted
    };
  }

  /**
   * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
   */
  cleanup() {
    console.log('üßπ IsolatedCallAudio: Cleaning up...');

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    for (const userId of this.participants.keys()) {
      this.removeParticipant(userId);
    }

    // –£–¥–∞–ª—è–µ–º audio element
    const audioElement = document.querySelector('audio[data-call-audio="true"]');
    if (audioElement && audioElement.parentNode) {
      audioElement.pause();
      audioElement.srcObject = null;
      audioElement.parentNode.removeChild(audioElement);
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if (this.audioContext && this.audioContext.state !== 'closed') {
      this.audioContext.close();
    }

    this.audioContext = null;
    this.masterGainNode = null;
    this.destinationNode = null;
    this.participants.clear();
    this.isInitialized = false;

    console.log('‚úÖ IsolatedCallAudio: Cleanup completed');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  getState() {
    return {
      isInitialized: this.isInitialized,
      contextState: this.audioContext?.state,
      participantsCount: this.participants.size,
      participants: Array.from(this.participants.keys())
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const isolatedCallAudioManager = new IsolatedCallAudioManager();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ –∫–ª–∞—Å—Å
export { IsolatedCallAudioManager };

