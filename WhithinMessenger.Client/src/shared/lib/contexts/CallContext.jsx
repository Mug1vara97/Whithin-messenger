import React, { createContext, useContext, useEffect, useRef } from 'react';
import { useCallStore } from '../stores/callStore';
import { shallow } from 'zustand/shallow';

const CallContext = createContext();

export const useCall = () => {
  const context = useContext(CallContext);
  if (!context) {
    throw new Error('useCall must be used within a CallProvider');
  }
  return context;
};

export const CallProvider = ({ children }) => {
  const callStore = useCallStore();
  const isInitialized = useRef(false);
  
  // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ Zustand store
  const isScreenSharing = useCallStore(state => state.isScreenSharing);
  const screenShareStream = useCallStore(state => state.screenShareStream);
  const remoteScreenShares = useCallStore(state => state.remoteScreenShares);
  
  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è userVolumes, userMutedStates, showVolumeSliders
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º shallow –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è Map –æ–±—ä–µ–∫—Ç–æ–≤
  const { userVolumes, userMutedStates, showVolumeSliders } = useCallStore(
    state => ({
      userVolumes: state.userVolumes,
      userMutedStates: state.userMutedStates,
      showVolumeSliders: state.showVolumeSliders
    }),
    shallow
  );
  
  // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  useEffect(() => {
    console.log('üîÑ CallContext: userVolumes updated', {
      size: userVolumes?.size,
      entries: Array.from(userVolumes?.entries() || [])
    });
  }, [userVolumes]);
  
  useEffect(() => {
    console.log('üîÑ CallContext: userMutedStates updated', {
      size: userMutedStates?.size,
      entries: Array.from(userMutedStates?.entries() || [])
    });
  }, [userMutedStates]);
  
  useEffect(() => {
    console.log('üîÑ CallContext: showVolumeSliders updated', {
      size: showVolumeSliders?.size,
      entries: Array.from(showVolumeSliders?.entries() || [])
    });
  }, [showVolumeSliders]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –∏–∑ localStorage
  useEffect(() => {
    if (!isInitialized.current) {
      const savedNoiseSuppression = localStorage.getItem('noiseSuppression');
      if (savedNoiseSuppression) {
        try {
          const isNoiseSuppressed = JSON.parse(savedNoiseSuppression);
          if (isNoiseSuppressed) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ –Ω–µ –≤–∫–ª—é—á–∞–µ–º —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ store
            useCallStore.setState({ isNoiseSuppressed: true });
          }
        } catch (error) {
          console.warn('Failed to parse noise suppression setting:', error);
        }
      }
      isInitialized.current = true;
    }
  }, [callStore]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  useEffect(() => {
    const handleNoiseSuppressionChanged = (event) => {
      const { enabled } = event.detail;
      useCallStore.setState({ isNoiseSuppressed: enabled });
      
      // –ï—Å–ª–∏ —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –∏ —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ—Ç–æ–∫, –≤–∫–ª—é—á–∞–µ–º –µ–≥–æ
      const state = useCallStore.getState();
      if (enabled && state.noiseSuppressionManager) {
        state.noiseSuppressionManager.enable(state.noiseSuppressionMode);
      } else if (!enabled && state.noiseSuppressionManager) {
        state.noiseSuppressionManager.disable();
      }
    };

    window.addEventListener('noiseSuppressionChanged', handleNoiseSuppressionChanged);
    return () => {
      window.removeEventListener('noiseSuppressionChanged', handleNoiseSuppressionChanged);
    };
  }, [callStore]);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  useEffect(() => {
    return () => {
      // –ù–µ –æ—á–∏—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –∂–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ
      // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞
    };
  }, []);

  const contextValue = {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isConnected: callStore.isConnected,
    isInCall: callStore.isInCall,
    currentRoomId: callStore.currentRoomId,
    currentUserId: callStore.currentUserId,
    currentUserName: callStore.currentUserName,
    currentCall: callStore.currentCall,
    participants: callStore.participants,
    isMuted: callStore.isMuted,
    isGlobalAudioMuted: callStore.isGlobalAudioMuted,
    isNoiseSuppressed: callStore.isNoiseSuppressed,
    noiseSuppressionMode: callStore.noiseSuppressionMode,
    userVolumes: userVolumes,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ö—É–∫–∞
    userMutedStates: userMutedStates,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ö—É–∫–∞
    showVolumeSliders: showVolumeSliders,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ö—É–∫–∞
    error: callStore.error,
    audioBlocked: callStore.audioBlocked,
    connecting: callStore.connecting,
    isScreenSharing: isScreenSharing,
    screenShareStream: screenShareStream,
    remoteScreenShares: remoteScreenShares,
    isVideoEnabled: callStore.isVideoEnabled,
    cameraStream: callStore.cameraStream,
    
    // –ú–µ—Ç–æ–¥—ã
    initializeCall: callStore.initializeCall,
    joinRoom: callStore.joinRoom,
    endCall: callStore.endCall,
    toggleMute: callStore.toggleMute,
    toggleUserMute: callStore.toggleUserMute,
    changeUserVolume: callStore.changeUserVolume,
    toggleVolumeSlider: callStore.toggleVolumeSlider,
    toggleGlobalAudio: callStore.toggleGlobalAudio,
    toggleNoiseSuppression: callStore.toggleNoiseSuppression,
    changeNoiseSuppressionMode: callStore.changeNoiseSuppressionMode,
    setError: callStore.setError,
    clearError: callStore.clearError,
    setAudioBlocked: callStore.setAudioBlocked,
    startScreenShare: callStore.startScreenShare,
    stopScreenShare: callStore.stopScreenShare,
    toggleScreenShare: callStore.toggleScreenShare,
    startVideo: callStore.startVideo,
    stopVideo: callStore.stopVideo,
    toggleVideo: callStore.toggleVideo,
    
    // –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ store –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    store: callStore
  };

  return (
    <CallContext.Provider value={contextValue}>
      {children}
    </CallContext.Provider>
  );
};

export default CallContext;
