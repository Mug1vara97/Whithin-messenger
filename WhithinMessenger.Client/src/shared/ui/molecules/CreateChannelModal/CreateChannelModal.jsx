import React, { useState, useEffect } from 'react';
import { FaTimes, FaHashtag, FaVolumeUp } from 'react-icons/fa';
import './CreateChannelModal.css';

const CreateChannelModal = ({ 
  isOpen, 
  onClose, 
  onSubmit, 
  categoryId,
  categoryName 
}) => {
  const [channelName, setChannelName] = useState('');
  const [channelType, setChannelType] = useState(3); // 3 - —Ç–µ–∫—Å—Ç–æ–≤—ã–π, 4 - –≥–æ–ª–æ—Å–æ–≤–æ–π
  const [isLoading, setIsLoading] = useState(false);
  const [errors, setErrors] = useState({});

  useEffect(() => {
    if (isOpen) {
      setChannelName('');
      setChannelType(3);
      setErrors({});
    }
  }, [isOpen]);

  const validateForm = () => {
    const newErrors = {};

    if (!channelName.trim()) {
      newErrors.name = '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    } else if (channelName.length < 2) {
      newErrors.name = '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞';
    } else if (channelName.length > 100) {
      newErrors.name = '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤';
    } else if (!/^[a-z0-9_-]+$/i.test(channelName)) {
      newErrors.name = '–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setIsLoading(true);
    setErrors({});
    
    try {
      await onSubmit({
        name: channelName.trim(),
        type: channelType,
        categoryId: categoryId || null
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞:', error);
      
      const errorMessage = error.response?.data?.message || 
                          error.message || 
                          '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞';
      
      setErrors({ submit: errorMessage });
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Escape') {
      onClose();
    }
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="create-channel-modal" onClick={(e) => e.stopPropagation()}>
        <div className="modal-header">
          <h2>–°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª</h2>
          <button className="close-button" onClick={onClose}>
            <FaTimes />
          </button>
        </div>

        <form onSubmit={handleSubmit} onKeyDown={handleKeyDown}>
          <div className="modal-body">
            <div className="form-group">
              <label htmlFor="category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
              <div className="category-display">
                {categoryName || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="channelType">–¢–∏–ø –∫–∞–Ω–∞–ª–∞</label>
              <div className="channel-type-selector">
                <label className={`type-option ${channelType === 3 ? 'selected' : ''}`}>
                  <input
                    type="radio"
                    name="channelType"
                    value="3"
                    checked={channelType === 3}
                    onChange={(e) => setChannelType(parseInt(e.target.value))}
                  />
                  <div className="type-content">
                    <FaHashtag className="type-icon" />
                    <div>
                      <div className="type-name">–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª</div>
                      <div className="type-description">–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, GIF, —ç–º–æ–¥–∑–∏, –º–Ω–µ–Ω–∏—è –∏ —Ñ–∞–π–ª—ã</div>
                    </div>
                  </div>
                </label>

                <label className={`type-option ${channelType === 4 ? 'selected' : ''}`}>
                  <input
                    type="radio"
                    name="channelType"
                    value="4"
                    checked={channelType === 4}
                    onChange={(e) => setChannelType(parseInt(e.target.value))}
                  />
                  <div className="type-content">
                    <FaVolumeUp className="type-icon" />
                    <div>
                      <div className="type-name">–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª</div>
                      <div className="type-description">–ì–æ–≤–æ—Ä–∏—Ç–µ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</div>
                    </div>
                  </div>
                </label>
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="channelName">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</label>
              <div className="input-container">
                <span className="input-prefix">
                  {channelType === 3 ? '#' : 'üîä'}
                </span>
                <input
                  id="channelName"
                  type="text"
                  value={channelName}
                  onChange={(e) => setChannelName(e.target.value)}
                  placeholder={channelType === 3 ? '–Ω–æ–≤—ã–π-–∫–∞–Ω–∞–ª' : '–ù–æ–≤—ã–π –∫–∞–Ω–∞–ª'}
                  className={errors.name ? 'error' : ''}
                  autoFocus
                />
              </div>
              {errors.name && <div className="error-message">{errors.name}</div>}
            </div>

            {errors.submit && (
              <div className="error-message submit-error">{errors.submit}</div>
            )}
          </div>

          <div className="modal-footer">
            <button type="button" className="cancel-button" onClick={onClose}>
              –û—Ç–º–µ–Ω–∞
            </button>
            <button 
              type="submit" 
              className="create-button"
              disabled={isLoading || !channelName.trim()}
            >
              {isLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default CreateChannelModal;
