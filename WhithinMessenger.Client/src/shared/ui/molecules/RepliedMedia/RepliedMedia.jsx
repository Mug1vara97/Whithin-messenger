import React, { useRef, useEffect } from 'react';
import { BASE_URL } from '../../../lib/constants/apiEndpoints';
import AudioMessage from '../AudioMessage/AudioMessage';
import { chatMediaAudioManager } from '../../../lib/utils/chatMediaAudio';
import './RepliedMedia.css';

const RepliedMedia = ({ content, mediaFiles }) => {
  const videoRef = useRef(null);

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤–∏–¥–µ–æ –∫ Web Audio API
  useEffect(() => {
    if (videoRef.current) {
      const videoElement = videoRef.current;
      chatMediaAudioManager.connectMediaElement(videoElement);
      console.log('üé• RepliedMedia: Video element connected to Web Audio API');

      return () => {
        chatMediaAudioManager.disconnectMediaElement(videoElement);
      };
    }
  }, []);
  // –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
  if (mediaFiles && mediaFiles.length > 0) {
    const mediaFile = mediaFiles[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª
    
    if (mediaFile.contentType.startsWith('audio/')) {
      return <AudioMessage mediaFile={mediaFile} />;
    }
    
    if (mediaFile.contentType.startsWith('image/')) {
      return (
        <img 
          src={`${BASE_URL}/${mediaFile.filePath}`} 
          alt="Replied image" 
          className="replied-image"
        />
      );
    }
    
    if (mediaFile.contentType.startsWith('video/')) {
      return (
        <video 
          ref={videoRef}
          src={`${BASE_URL}/${mediaFile.filePath}`} 
          controls 
          className="replied-video"
        />
      );
    }
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤, –Ω–æ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø—É—Ç–µ–º –∫ —Ñ–∞–π–ª—É
  if (content && typeof content === 'string') {
    console.log('üéµ RepliedMedia - –ø—Ä–æ–≤–µ—Ä—è–µ–º content:', content);
    const isMediaPath = content.toLowerCase().includes('/uploads/') || 
                       content.toLowerCase().startsWith('uploads/');
    
    if (isMediaPath) {
      console.log('üéµ RepliedMedia - —ç—Ç–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª:', content);
      const src = `${BASE_URL}/${content}`;
      const extension = content.split('.').pop().toLowerCase();
      
      switch (extension) {
        case 'mp4':
        case 'mov':
          return <video ref={videoRef} src={src} controls className="replied-video" />;
        case 'webm':
          // WebM –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ –≤–∏–¥–µ–æ, —Ç–∞–∫ –∏ –∞—É–¥–∏–æ - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ MIME —Ç–∏–ø—É –∏–ª–∏ –¥—Ä—É–≥–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
          // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å—á–∏—Ç–∞–µ–º webm –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞—É–¥–∏–æ webm, 
          // –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
          return <video ref={videoRef} src={src} controls className="replied-video" />;
        case 'jpg':
        case 'jpeg':
        case 'png':
        case 'gif':
        case 'webp':
          return <img src={src} alt="Replied image" className="replied-image" />;
        case 'wav':
        case 'mp3':
        case 'ogg':
        case 'm4a': {
          // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç mediaFile –¥–ª—è AudioMessage
          const audioMediaFile = {
            id: 'replied-audio',
            filePath: content,
            contentType: `audio/${extension}`,
            fileName: content.split('/').pop()
          };
          return <AudioMessage mediaFile={audioMediaFile} />;
        }
        default:
          return <a href={src} target="_blank" rel="noopener noreferrer">Download file</a>;
      }
    }
  }

  // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
  console.log('üéµ RepliedMedia - –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç:', content);
  return <span className="replied-text">{content}</span>;
};

export default RepliedMedia;
