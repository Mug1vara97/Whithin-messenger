import React, { useEffect } from 'react';
import { useGlobalCall } from '../../../lib/hooks/useGlobalCall';
import { createParticipant } from '../../../../entities/video-call/model/types';
import { VideoCallGrid } from '../../atoms';
import MicIcon from '@mui/icons-material/Mic';
import MicOffIcon from '@mui/icons-material/MicOff';
import VideocamIcon from '@mui/icons-material/Videocam';
import VideocamOffIcon from '@mui/icons-material/VideocamOff';
import ScreenShareIcon from '@mui/icons-material/ScreenShare';
import StopScreenShareIcon from '@mui/icons-material/StopScreenShare';
import CallEndIcon from '@mui/icons-material/CallEnd';
import VolumeUpIcon from '@mui/icons-material/VolumeUp';
import VolumeOffIcon from '@mui/icons-material/VolumeOff';
import NoiseAwareIcon from '@mui/icons-material/NoiseAware';
import NoiseControlOffIcon from '@mui/icons-material/NoiseControlOff';
import styles from './ChatVoiceCall.module.css';

const ChatVoiceCall = ({
  chatId,
  chatName,
  userId,
  userName,
  onClose
}) => {
  const {
    isConnected,
    isMuted,
    isAudioEnabled,
    participants,
    error,
    isGlobalAudioMuted,
    currentCall,
    isScreenSharing,
    screenShareStream,
    isVideoEnabled,
    cameraStream,
    userVolumes,
    userMutedStates,
    showVolumeSliders,
    remoteScreenShares,
    startCall,
    endCall,
    toggleMute,
    toggleGlobalAudio,
    toggleUserMute,
    changeUserVolume,
    toggleVolumeSlider,
    startScreenShare,
    stopScreenShare,
    toggleVideo
  } = useGlobalCall(userId, userName);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    console.log('ChatVoiceCall: useEffect triggered with:', { chatId, userId, userName, chatName });

    if (chatId && userId && userName) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —É–∂–µ –∑–≤–æ–Ω–æ–∫ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
      if (isConnected && currentCall?.channelId === chatId) {
        console.log('ChatVoiceCall: Call already active in this chat, skipping start');
        return;
      }

      console.log('ChatVoiceCall: Starting voice call');
      startCall(chatId, chatName).catch((err) => {
        console.error('Call start error:', err);
      });
    } else {
      console.log('ChatVoiceCall: Missing required parameters:', { chatId, userId, userName });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [chatId, chatName, userId, userName]);

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
  useEffect(() => {
    console.log('ChatVoiceCall: Screen sharing state changed:', { 
      isScreenSharing, 
      hasScreenShareStream: !!screenShareStream,
      participants: participants.length,
      isConnected
    });
  }, [isScreenSharing, screenShareStream, participants.length, isConnected]);

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ñ–æ–∫—É—Å–∞ –Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞ –∏–ª–∏ –≤–µ–±–∫–∞–º–µ—Ä–µ
  useEffect(() => {
    const hasAnyScreenShare = isScreenSharing || remoteScreenShares.size > 0;
    const hasAnyVideo = isVideoEnabled || participants.some(p => p.isVideoEnabled);
    const shouldAutoFocus = hasAnyScreenShare || hasAnyVideo;
    
    if (shouldAutoFocus) {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã VideoCallGrid —É—Å–ø–µ–ª –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è
      const timer = setTimeout(() => {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ screen share tile
        let targetTile = document.querySelector('.screen-share-content');
        
        // –ï—Å–ª–∏ screen share –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º video tile (–≤–µ–±–∫–∞–º–µ—Ä–∞)
        if (!targetTile) {
          // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º tile —Å –≤–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const allVideoTiles = document.querySelectorAll('.video-tile, [data-participant-id]');
          for (const tile of allVideoTiles) {
            const participantId = tile.getAttribute('data-participant-id');
            if (participantId && participantId !== userId) {
              targetTile = tile;
              break;
            }
          }
          
          // –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∏–¥–µ–æ –Ω–µ—Ç, –∏—â–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          if (!targetTile) {
            for (const tile of allVideoTiles) {
              const participantId = tile.getAttribute('data-participant-id');
              if (participantId && participantId === userId) {
                targetTile = tile;
                break;
              }
            }
          }
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ª—é–±–æ–π tile —Å –≤–∏–¥–µ–æ
        if (!targetTile) {
          targetTile = document.querySelector('[data-participant-id]');
        }
        
        if (targetTile) {
          targetTile.click();
          console.log('ChatVoiceCall: Auto-focused on screen share or video');
        }
      }, 100);
      
      return () => clearTimeout(timer);
    }
  }, [isScreenSharing, screenShareStream, remoteScreenShares.size, isVideoEnabled, participants, userId]);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      console.log('ChatVoiceCall: Component unmounted, but call continues in background');
    };
  }, []);

  const handleClose = () => {
    if (onClose) {
      onClose();
    }
  };

  const handleDisconnect = async () => {
    await endCall();
    handleClose();
  };

  const handleToggleMute = () => {
    toggleMute();
  };

  const handleToggleVideo = async () => {
    try {
      console.log('üé• Video button clicked, isVideoEnabled:', isVideoEnabled);
      console.log('üé• toggleVideo function:', typeof toggleVideo);
      await toggleVideo();
      console.log('üé• Video toggle completed');
    } catch (error) {
      console.error('üé• Video toggle error:', error);
    }
  };

  const handleScreenShare = async () => {
    try {
      console.log('ChatVoiceCall: Screen share button clicked, isScreenSharing:', isScreenSharing);
      if (isScreenSharing) {
        await stopScreenShare();
      } else {
        await startScreenShare();
      }
    } catch (error) {
      console.error('Screen share error:', error);
    }
  };


  const handleEndCall = async () => {
    handleDisconnect();
  };

  // –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–∞–∫ –≤ VoiceCallView.jsx
  const currentUser = createParticipant(userId, userName || 'You', null, 'online', 'host');
  currentUser.isMuted = isMuted;
  currentUser.isAudioEnabled = isAudioEnabled;
  currentUser.isGlobalAudioMuted = isGlobalAudioMuted; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  currentUser.isSpeaking = false;
  currentUser.isVideoEnabled = isVideoEnabled;
  currentUser.videoStream = cameraStream;
  currentUser.isCurrentUser = true; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  
  const displayParticipants = [currentUser];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  participants.forEach(participant => {
    const videoParticipant = createParticipant(
      participant.userId || participant.id || participant.name, 
      participant.name, 
      participant.avatar || null, 
      'online', 
      'participant'
    );
    videoParticipant.isMuted = participant.isMuted || false;
    videoParticipant.isGlobalAudioMuted = participant.isGlobalAudioMuted || false;
    videoParticipant.isSpeaking = participant.isSpeaking || false;
    videoParticipant.isVideoEnabled = participant.isVideoEnabled || false;
    videoParticipant.videoStream = participant.videoStream || null;
    console.log('üé• Creating display participant:', {
      id: videoParticipant.id,
      name: videoParticipant.name,
      isVideoEnabled: videoParticipant.isVideoEnabled,
      hasVideoStream: !!videoParticipant.videoStream
    });
    displayParticipants.push(videoParticipant);
  });

  if (!isConnected) {
    return null;
  }

  return (
    <div className={styles.voiceCallContainer}>
      {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
      <div className={styles.voiceCallWrapper}>
        <div className={styles.participantsContainer}>
          {(() => {
            console.log('ChatVoiceCall: Rendering participants, isScreenSharing:', isScreenSharing, 'remoteScreenShares:', remoteScreenShares.size, 'isVideoEnabled:', isVideoEnabled);
            const hasAnyScreenShare = isScreenSharing || remoteScreenShares.size > 0;
            const hasAnyVideo = isVideoEnabled || participants.some(p => p.isVideoEnabled);
            const shouldShowVideoGrid = hasAnyScreenShare || hasAnyVideo;
            return shouldShowVideoGrid ? (
              /* –ü—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞ –∏–ª–∏ –≤–µ–±–∫–∞–º–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º VideoCallGrid –¥–ª—è —Ñ–æ–∫—É—Å–∞ */
              <div className={styles.screenShareContainer}>
                <VideoCallGrid 
                  participants={displayParticipants}
                  onParticipantClick={(participant) => {
                    console.log('Clicked participant:', participant);
                  }}
                  userVolumes={userVolumes}
                  userMutedStates={userMutedStates}
                  showVolumeSliders={showVolumeSliders}
                  onToggleUserMute={toggleUserMute}
                  onChangeUserVolume={changeUserVolume}
                  onToggleVolumeSlider={toggleVolumeSlider}
                  screenShareStream={screenShareStream}
                  isScreenSharing={isScreenSharing}
                  screenShareParticipant={isScreenSharing ? {
                    id: userId,
                    name: userName,
                    isScreenSharing: true
                  } : null}
                  remoteScreenShares={remoteScreenShares}
                  onStopScreenShare={handleScreenShare}
                  forceGridMode={false}
                  hideBottomUsers={true}
                  isVideoEnabled={isVideoEnabled}
                  videoStream={cameraStream}
                  enableAutoFocus={false} // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Ñ–æ–∫—É—Å –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
                />
              </div>
            ) : (
              /* –û–±—ã—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—Ä—É–∂–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */
              displayParticipants.map((participant) => (
                <div key={participant.id} className={styles.participantItem}>
                  <div className={styles.participantAvatarContainer}>
                    <div className={styles.participantAvatar}>
                      <div className={styles.avatarCircle}>
                        {(participant.name || 'U').charAt(0).toUpperCase()}
                      </div>
                      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∞—Ç—É—Å–∞ */}
                      <div className={styles.statusIndicators}>
                        {participant.isMuted && (
                          <div className={`${styles.statusIndicator} ${styles.muteIndicator}`}>
                            <MicOffIcon />
                          </div>
                        )}
                        {participant.isGlobalAudioMuted && (
                          <div className={`${styles.statusIndicator} ${styles.audioMutedIndicator}`}>
                            <VolumeOffIcon />
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              ))
            );
          })()}
        </div>
      </div>


      {/* –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className={styles.bottomControls}>
        <div className={styles.controlSection}>
          <div className={styles.mainControls}>
            {/* –ú–∏–∫—Ä–æ—Ñ–æ–Ω */}
            <button 
              className={`${styles.controlBtn} ${styles.microphoneBtn} ${isMuted ? 'muted' : 'unmuted'}`}
              onClick={handleToggleMute}
              title={isMuted ? '–í–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω' : '–í—ã–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω'}
            >
              {isMuted ? <MicOffIcon /> : <MicIcon />}
            </button>

            {/* –ö–∞–º–µ—Ä–∞ */}
            <button 
              className={`${styles.controlBtn} ${styles.cameraBtn} ${isVideoEnabled ? 'active' : ''}`}
              onClick={handleToggleVideo}
              title={isVideoEnabled ? '–í—ã–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É' : '–í–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É'}
              style={{ 
                backgroundColor: isVideoEnabled ? '#5865f2' : '#40444b',
                color: isVideoEnabled ? '#ffffff' : '#b9bbbe'
              }}
            >
              {isVideoEnabled ? <VideocamIcon /> : <VideocamOffIcon />}
            </button>

            {/* –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ */}
            <button 
              className={`${styles.controlBtn} ${styles.screenShareBtn} ${isScreenSharing ? 'active' : ''}`}
              onClick={handleScreenShare}
              title={isScreenSharing ? '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞' : '–ù–∞—á–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞'}
              style={{ 
                backgroundColor: isScreenSharing ? '#5865f2' : '#40444b',
                color: isScreenSharing ? '#ffffff' : '#b9bbbe'
              }}
            >
              {isScreenSharing ? <StopScreenShareIcon /> : <ScreenShareIcon />}
            </button>

            {/* –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∑–≤—É–∫ */}
            <button 
              className={`${styles.controlBtn} ${styles.globalAudioBtn} ${isGlobalAudioMuted ? 'muted' : 'unmuted'}`}
              onClick={toggleGlobalAudio}
              title={isGlobalAudioMuted ? '–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' : '–í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫'}
            >
              {isGlobalAudioMuted ? <VolumeOffIcon /> : <VolumeUpIcon />}
            </button>

            {/* –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫ */}
            <button 
              className={`${styles.controlBtn} ${styles.endCallBtn}`}
              onClick={handleEndCall}
              title="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫"
            >
              <CallEndIcon />
            </button>
          </div>
        </div>
      </div>

      {/* –û—à–∏–±–∫–∏ */}
      {error && (
        <div className={styles.errorBanner}>
          <span>–û—à–∏–±–∫–∞: {error}</span>
        </div>
      )}
    </div>
  );
};

export default ChatVoiceCall;
