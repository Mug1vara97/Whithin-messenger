import React, { useState, useRef, useEffect } from 'react';
import { BASE_URL } from '../../../lib/constants/apiEndpoints';
import ImagePreview from '../ImagePreview/ImagePreview';
import AudioMessage from '../AudioMessage/AudioMessage';
import { chatMediaAudioManager } from '../../../lib/utils/chatMediaAudio';
import './MediaFile.css';

const MediaFile = ({ mediaFile }) => {
  const [error, setError] = useState(null);
  const [showPreview, setShowPreview] = useState(false);
  const [imageLoading, setImageLoading] = useState(true);
  const [videoLoading, setVideoLoading] = useState(true);
  const videoRef = useRef(null);

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤–∏–¥–µ–æ –∫ Web Audio API –¥–ª—è –æ–±—Ö–æ–¥–∞ suppressLocalAudioPlayback
  useEffect(() => {
    if (videoRef.current && mediaFile.contentType.startsWith('video/')) {
      const videoElement = videoRef.current;
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –∫ Web Audio API
      chatMediaAudioManager.connectMediaElement(videoElement);
      console.log('üé• MediaFile: Video element connected to Web Audio API');

      return () => {
        // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        chatMediaAudioManager.disconnectMediaElement(videoElement);
        console.log('üé• MediaFile: Video element disconnected from Web Audio API');
      };
    }
  }, [mediaFile.contentType]);

  const renderMediaContent = () => {
    if (mediaFile.contentType.startsWith('image/')) {
      const imageUrl = `${BASE_URL}/${mediaFile.filePath}`;
      
      
      return (
        <div className="media-image-container">
          {imageLoading && (
            <div className="media-skeleton">
              <div className="skeleton-shimmer"></div>
              <div className="skeleton-icon">üñºÔ∏è</div>
            </div>
          )}
          <img
            src={imageUrl}
            alt={mediaFile.originalFileName}
            className={`media-image ${imageLoading ? 'media-loading' : ''}`}
            onClick={() => !imageLoading && setShowPreview(true)}
            onLoad={() => {
              console.log('‚úÖ MediaFile - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', imageUrl);
              setImageLoading(false);
            }}
            onError={(e) => {
              console.error('‚ùå MediaFile - –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imageUrl, e);
              setImageLoading(false);
              setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            }}
            loading="lazy"
          />
        </div>
      );
    }

    if (mediaFile.contentType.startsWith('video/')) {
      return (
        <div className="media-video-container">
          {videoLoading && (
            <div className="media-skeleton media-skeleton-video">
              <div className="skeleton-shimmer"></div>
              <div className="skeleton-icon">üé•</div>
            </div>
          )}
          <video
            ref={videoRef}
            src={`${BASE_URL}/${mediaFile.filePath}`}
            controls
            className={`media-video ${videoLoading ? 'media-loading' : ''}`}
            preload="metadata"
            onLoadedData={() => {
              console.log('‚úÖ MediaFile - –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
              setVideoLoading(false);
            }}
            onError={(e) => {
              console.error('‚ùå MediaFile - –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:', e);
              setVideoLoading(false);
              setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ');
            }}
          >
            –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ.
          </video>
        </div>
      );
    }

    if (mediaFile.contentType.startsWith('audio/')) {
      return <AudioMessage mediaFile={mediaFile} />;
    }

    // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
    return (
      <div className="media-file-container">
        <div className="media-file-icon">
          üìÑ
        </div>
        <div className="media-file-info">
          <div className="media-file-name">{mediaFile.originalFileName}</div>
          <div className="media-file-size">{formatFileSize(mediaFile.fileSize)}</div>
        </div>
      </div>
    );
  };

  const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  return (
    <>
      <div className="media-file">
        {error && (
          <div className="media-error">
            {error}
          </div>
        )}
        
        <div className="media-content">
          {renderMediaContent()}
        </div>
      </div>
      
      {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ */}
      {mediaFile.contentType.startsWith('image/') && (
        <ImagePreview
          mediaFile={mediaFile}
          isOpen={showPreview}
          onClose={() => setShowPreview(false)}
        />
      )}
    </>
  );
};

export default MediaFile;
