services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: whithin_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  backend:
    build:
      context: ./WhithinMessenger.Backend
      dockerfile: src/WhithinMessenger.Api/Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./WhithinMessenger.Backend/src/WhithinMessenger.Api/wwwroot/uploads:/app/wwwroot/uploads
      - uploads_data:/app/wwwroot/uploads
      - ./ssl:/app/ssl
    environment:
      - ASPNETCORE_URLS=http://+:8080
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=db;Port=5432;Database=whithin_db;Username=postgres;Password=postgres
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  client:
    build:
      context: ./WhithinMessenger.Client
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

  voice-server:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
      - "40000-40100:40000-40100/udp"
      - "40000-40100:40000-40100/tcp"
    volumes:
      - ./ssl:/app/ssl
    environment:
      - NODE_ENV=production
      - MEDIASOUP_LISTEN_IP=0.0.0.0
      - MEDIASOUP_ANNOUNCED_IP=whithin.ru
    networks:
      - app-network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - client
      - backend
      - voice-server
    networks:
      - app-network
    restart: unless-stopped
    environment:
      - DOMAIN=whithin.ru

volumes:
  postgres_data:
  uploads_data:

networks:
  app-network:
    driver: bridge

