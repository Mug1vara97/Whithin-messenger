using MediatR;
using WhithinMessenger.Domain.Interfaces;

namespace WhithinMessenger.Application.CommandsAndQueries.Chats.GetChatParticipants
{
    public class GetChatParticipantsQueryHandler : IRequestHandler<GetChatParticipantsQuery, GetChatParticipantsResult>
    {
        private readonly IChatRepository _chatRepository;

        public GetChatParticipantsQueryHandler(IChatRepository chatRepository)
        {
            _chatRepository = chatRepository;
        }

        public async Task<GetChatParticipantsResult> Handle(GetChatParticipantsQuery request, CancellationToken cancellationToken)
        {
            try
            {
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö —á–∞—Ç–∞
                var participants = await _chatRepository.GetChatParticipantsAsync(request.ChatId, cancellationToken);
                
                Console.WriteLine($"üîç GetChatParticipants - ChatId: {request.ChatId}");
                Console.WriteLine($"‚úÖ Found {participants.Count} participants for chat {request.ChatId}");
                foreach (var participant in participants)
                {
                    Console.WriteLine($"  - {participant.Username} (ID: {participant.UserId})");
                }

                return new GetChatParticipantsResult
                {
                    Success = true,
                    Participants = participants
                };
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Error getting chat participants: {ex.Message}");
                return new GetChatParticipantsResult
                {
                    Success = false,
                    ErrorMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞: " + ex.Message
                };
            }
        }
    }
}
